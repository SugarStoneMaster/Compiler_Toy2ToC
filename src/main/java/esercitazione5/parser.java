
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package esercitazione5;

import java_cup.runtime.*;
import nodes.*;
import nodes.statements.*;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(Scanner s, SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\144\000\002\002\005\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\002\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\002\000" +
    "\002\005\004\000\002\006\007\000\002\006\007\000\002" +
    "\006\007\000\002\006\007\000\002\007\005\000\002\007" +
    "\003\000\002\010\005\000\002\010\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\013\014\000\002\014\006\000\002\014\002" +
    "\000\002\015\007\000\002\015\002\000\002\037\005\000" +
    "\002\037\003\000\002\016\012\000\002\017\006\000\002" +
    "\017\002\000\002\020\007\000\002\020\002\000\002\021" +
    "\003\000\002\021\004\000\002\022\004\000\002\022\004" +
    "\000\002\022\002\000\002\023\006\000\002\023\004\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\004\000\002\023\004\000\002\023" +
    "\004\000\002\024\006\000\002\024\005\000\002\025\006" +
    "\000\002\025\005\000\002\026\011\000\002\027\004\000" +
    "\002\027\002\000\002\030\006\000\002\031\004\000\002" +
    "\031\002\000\002\032\007\000\002\040\015\000\002\033" +
    "\003\000\002\033\010\000\002\033\007\000\002\033\002" +
    "\000\002\034\005\000\002\034\006\000\002\034\003\000" +
    "\002\034\004\000\002\035\005\000\002\035\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\005\000\002\036\005\000" +
    "\002\036\005\000\002\036\005\000\002\036\005\000\002" +
    "\036\005\000\002\036\005\000\002\036\005\000\002\036" +
    "\005\000\002\036\005\000\002\036\005\000\002\036\005" +
    "\000\002\036\005\000\002\036\004\000\002\036\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\330\000\010\004\004\014\011\021\ufffd\001\002\000" +
    "\004\070\166\001\002\000\004\002\305\001\002\000\010" +
    "\004\004\014\011\021\ufffd\001\002\000\010\004\004\014" +
    "\011\021\ufffd\001\002\000\004\021\247\001\002\000\004" +
    "\070\012\001\002\000\004\016\013\001\002\000\006\017" +
    "\uffe2\070\014\001\002\000\004\006\237\001\002\000\004" +
    "\017\016\001\002\000\004\020\017\001\002\000\014\056" +
    "\023\057\020\060\021\061\025\067\024\001\002\000\012" +
    "\005\uffe8\006\uffe8\010\uffe8\017\uffe8\001\002\000\012\005" +
    "\uffe7\006\uffe7\010\uffe7\017\uffe7\001\002\000\006\006\uffde" +
    "\010\235\001\002\000\012\005\uffe9\006\uffe9\010\uffe9\017" +
    "\uffe9\001\002\000\012\005\uffe5\006\uffe5\010\uffe5\017\uffe5" +
    "\001\002\000\012\005\uffe6\006\uffe6\010\uffe6\017\uffe6\001" +
    "\002\000\004\006\027\001\002\000\026\004\004\015\uffd4" +
    "\024\040\031\032\034\042\035\043\037\030\062\046\063" +
    "\033\070\041\001\002\000\032\005\uffbb\012\054\013\060" +
    "\016\056\036\135\042\051\055\065\070\063\071\055\072" +
    "\061\073\052\074\064\001\002\000\004\007\230\001\002" +
    "\000\026\012\054\013\060\016\056\042\051\055\065\070" +
    "\063\071\055\072\061\073\052\074\064\001\002\000\004" +
    "\070\212\001\002\000\004\005\211\001\002\000\004\005" +
    "\210\001\002\000\004\005\207\001\002\000\042\004\004" +
    "\015\uffd4\022\uffd4\024\040\026\uffd4\027\uffd4\030\uffd4\031" +
    "\032\033\uffd4\034\042\035\043\037\030\062\046\063\033" +
    "\066\uffd4\070\041\001\002\000\026\012\054\013\060\016" +
    "\056\042\051\055\065\070\063\071\055\072\061\073\052" +
    "\074\064\001\002\000\010\007\ufff2\010\152\016\153\001" +
    "\002\000\032\005\uffbb\012\054\013\060\016\056\036\135" +
    "\042\051\055\065\070\063\071\055\072\061\073\052\074" +
    "\064\001\002\000\032\005\uffbb\012\054\013\060\016\056" +
    "\036\135\042\051\055\065\070\063\071\055\072\061\073" +
    "\052\074\064\001\002\000\042\004\004\015\uffd4\022\uffd4" +
    "\024\040\026\uffd4\027\uffd4\030\uffd4\031\032\033\uffd4\034" +
    "\042\035\043\037\030\062\046\063\033\066\uffd4\070\041" +
    "\001\002\000\004\015\131\001\002\000\026\012\054\013" +
    "\060\016\056\042\051\055\065\070\063\071\055\072\061" +
    "\073\052\074\064\001\002\000\004\005\050\001\002\000" +
    "\042\004\uffcb\015\uffcb\022\uffcb\024\uffcb\026\uffcb\027\uffcb" +
    "\030\uffcb\031\uffcb\033\uffcb\034\uffcb\035\uffcb\037\uffcb\062" +
    "\uffcb\063\uffcb\066\uffcb\070\uffcb\001\002\000\026\012\054" +
    "\013\060\016\056\042\051\055\065\070\063\071\055\072" +
    "\061\073\052\074\064\001\002\000\052\005\uffb3\010\uffb3" +
    "\017\uffb3\025\uffb3\032\uffb3\036\uffb3\041\uffb3\042\uffb3\043" +
    "\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3" +
    "\052\uffb3\053\uffb3\054\uffb3\064\uffb3\065\uffb3\001\002\000" +
    "\040\005\uffb5\010\126\017\uffb5\041\073\042\070\043\077" +
    "\044\075\045\072\046\100\047\101\050\074\051\076\052" +
    "\071\053\067\054\102\001\002\000\052\005\uffae\010\uffae" +
    "\017\uffae\025\uffae\032\uffae\036\uffae\041\uffae\042\uffae\043" +
    "\uffae\044\uffae\045\uffae\046\uffae\047\uffae\050\uffae\051\uffae" +
    "\052\uffae\053\uffae\054\uffae\064\uffae\065\uffae\001\002\000" +
    "\052\005\uffb1\010\uffb1\017\uffb1\025\uffb1\032\uffb1\036\uffb1" +
    "\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047" +
    "\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\064\uffb1" +
    "\065\uffb1\001\002\000\026\012\054\013\060\016\056\042" +
    "\051\055\065\070\063\071\055\072\061\073\052\074\064" +
    "\001\002\000\004\005\123\001\002\000\052\005\uffad\010" +
    "\uffad\017\uffad\025\uffad\032\uffad\036\uffad\041\uffad\042\uffad" +
    "\043\uffad\044\uffad\045\uffad\046\uffad\047\uffad\050\uffad\051" +
    "\uffad\052\uffad\053\uffad\054\uffad\064\uffad\065\uffad\001\002" +
    "\000\052\005\uffb2\010\uffb2\017\uffb2\025\uffb2\032\uffb2\036" +
    "\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2" +
    "\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\064" +
    "\uffb2\065\uffb2\001\002\000\052\005\uffb4\010\uffb4\017\uffb4" +
    "\025\uffb4\032\uffb4\036\uffb4\041\uffb4\042\uffb4\043\uffb4\044" +
    "\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4" +
    "\053\uffb4\054\uffb4\064\uffb4\065\uffb4\001\002\000\054\005" +
    "\uffaf\010\uffaf\016\117\017\uffaf\025\uffaf\032\uffaf\036\uffaf" +
    "\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047" +
    "\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\064\uffaf" +
    "\065\uffaf\001\002\000\052\005\uffb0\010\uffb0\017\uffb0\025" +
    "\uffb0\032\uffb0\036\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0" +
    "\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053" +
    "\uffb0\054\uffb0\064\uffb0\065\uffb0\001\002\000\026\012\054" +
    "\013\060\016\056\042\051\055\065\070\063\071\055\072" +
    "\061\073\052\074\064\001\002\000\052\005\uff9e\010\uff9e" +
    "\017\uff9e\025\uff9e\032\uff9e\036\uff9e\041\073\042\070\043" +
    "\077\044\075\045\072\046\100\047\101\050\074\051\076" +
    "\052\071\053\067\054\102\064\uff9e\065\uff9e\001\002\000" +
    "\026\012\054\013\060\016\056\042\051\055\065\070\063" +
    "\071\055\072\061\073\052\074\064\001\002\000\026\012" +
    "\054\013\060\016\056\042\051\055\065\070\063\071\055" +
    "\072\061\073\052\074\064\001\002\000\026\012\054\013" +
    "\060\016\056\042\051\055\065\070\063\071\055\072\061" +
    "\073\052\074\064\001\002\000\026\012\054\013\060\016" +
    "\056\042\051\055\065\070\063\071\055\072\061\073\052" +
    "\074\064\001\002\000\026\012\054\013\060\016\056\042" +
    "\051\055\065\070\063\071\055\072\061\073\052\074\064" +
    "\001\002\000\026\012\054\013\060\016\056\042\051\055" +
    "\065\070\063\071\055\072\061\073\052\074\064\001\002" +
    "\000\026\012\054\013\060\016\056\042\051\055\065\070" +
    "\063\071\055\072\061\073\052\074\064\001\002\000\026" +
    "\012\054\013\060\016\056\042\051\055\065\070\063\071" +
    "\055\072\061\073\052\074\064\001\002\000\026\012\054" +
    "\013\060\016\056\042\051\055\065\070\063\071\055\072" +
    "\061\073\052\074\064\001\002\000\026\012\054\013\060" +
    "\016\056\042\051\055\065\070\063\071\055\072\061\073" +
    "\052\074\064\001\002\000\026\012\054\013\060\016\056" +
    "\042\051\055\065\070\063\071\055\072\061\073\052\074" +
    "\064\001\002\000\026\012\054\013\060\016\056\042\051" +
    "\055\065\070\063\071\055\072\061\073\052\074\064\001" +
    "\002\000\052\005\uffa7\010\uffa7\017\uffa7\025\uffa7\032\uffa7" +
    "\036\uffa7\041\073\042\070\043\077\044\075\045\072\046" +
    "\100\047\101\050\074\051\076\052\071\053\067\054\uffa7" +
    "\064\uffa7\065\uffa7\001\002\000\036\005\uffa4\010\uffa4\017" +
    "\uffa4\025\uffa4\032\uffa4\036\uffa4\041\073\042\070\043\077" +
    "\044\075\053\uffa4\054\uffa4\064\uffa4\065\uffa4\001\002\000" +
    "\036\005\uffa1\010\uffa1\017\uffa1\025\uffa1\032\uffa1\036\uffa1" +
    "\041\073\042\070\043\077\044\075\053\uffa1\054\uffa1\064" +
    "\uffa1\065\uffa1\001\002\000\052\005\uffaa\010\uffaa\017\uffaa" +
    "\025\uffaa\032\uffaa\036\uffaa\041\uffaa\042\uffaa\043\uffaa\044" +
    "\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa" +
    "\053\uffaa\054\uffaa\064\uffaa\065\uffaa\001\002\000\036\005" +
    "\uffa6\010\uffa6\017\uffa6\025\uffa6\032\uffa6\036\uffa6\041\073" +
    "\042\070\043\077\044\075\053\uffa6\054\uffa6\064\uffa6\065" +
    "\uffa6\001\002\000\052\005\uffa9\010\uffa9\017\uffa9\025\uffa9" +
    "\032\uffa9\036\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9\045" +
    "\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9" +
    "\054\uffa9\064\uffa9\065\uffa9\001\002\000\036\005\uffa3\010" +
    "\uffa3\017\uffa3\025\uffa3\032\uffa3\036\uffa3\041\073\042\070" +
    "\043\077\044\075\053\uffa3\054\uffa3\064\uffa3\065\uffa3\001" +
    "\002\000\052\005\uffac\010\uffac\017\uffac\025\uffac\032\uffac" +
    "\036\uffac\041\uffac\042\uffac\043\077\044\075\045\uffac\046" +
    "\uffac\047\uffac\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac" +
    "\064\uffac\065\uffac\001\002\000\036\005\uffa2\010\uffa2\017" +
    "\uffa2\025\uffa2\032\uffa2\036\uffa2\041\073\042\070\043\077" +
    "\044\075\053\uffa2\054\uffa2\064\uffa2\065\uffa2\001\002\000" +
    "\036\005\uffa5\010\uffa5\017\uffa5\025\uffa5\032\uffa5\036\uffa5" +
    "\041\073\042\070\043\077\044\075\053\uffa5\054\uffa5\064" +
    "\uffa5\065\uffa5\001\002\000\052\005\uffab\010\uffab\017\uffab" +
    "\025\uffab\032\uffab\036\uffab\041\uffab\042\uffab\043\077\044" +
    "\075\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab" +
    "\053\uffab\054\uffab\064\uffab\065\uffab\001\002\000\052\005" +
    "\uffa8\010\uffa8\017\uffa8\025\uffa8\032\uffa8\036\uffa8\041\073" +
    "\042\070\043\077\044\075\045\072\046\100\047\101\050" +
    "\074\051\076\052\071\053\uffa8\054\uffa8\064\uffa8\065\uffa8" +
    "\001\002\000\030\012\054\013\060\016\056\017\121\042" +
    "\051\055\065\070\063\071\055\072\061\073\052\074\064" +
    "\001\002\000\004\017\122\001\002\000\052\005\uffc9\010" +
    "\uffc9\017\uffc9\025\uffc9\032\uffc9\036\uffc9\041\uffc9\042\uffc9" +
    "\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051" +
    "\uffc9\052\uffc9\053\uffc9\054\uffc9\064\uffc9\065\uffc9\001\002" +
    "\000\052\005\uffca\010\uffca\017\uffca\025\uffca\032\uffca\036" +
    "\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca" +
    "\047\uffca\050\uffca\051\uffca\052\uffca\053\uffca\054\uffca\064" +
    "\uffca\065\uffca\001\002\000\042\004\uffd1\015\uffd1\022\uffd1" +
    "\024\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\033\uffd1\034" +
    "\uffd1\035\uffd1\037\uffd1\062\uffd1\063\uffd1\066\uffd1\070\uffd1" +
    "\001\002\000\034\017\125\041\073\042\070\043\077\044" +
    "\075\045\072\046\100\047\101\050\074\051\076\052\071" +
    "\053\067\054\102\001\002\000\052\005\uffa0\010\uffa0\017" +
    "\uffa0\025\uffa0\032\uffa0\036\uffa0\041\uffa0\042\uffa0\043\uffa0" +
    "\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052" +
    "\uffa0\053\uffa0\054\uffa0\064\uffa0\065\uffa0\001\002\000\026" +
    "\012\054\013\060\016\056\042\051\055\065\070\063\071" +
    "\055\072\061\073\052\074\064\001\002\000\006\005\uffb6" +
    "\017\uffb6\001\002\000\052\005\uff9f\010\uff9f\017\uff9f\025" +
    "\uff9f\032\uff9f\036\uff9f\041\uff9f\042\uff9f\043\077\044\075" +
    "\045\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f\053" +
    "\uff9f\054\uff9f\064\uff9f\065\uff9f\001\002\000\012\002\uffe4" +
    "\004\uffe4\014\uffe4\021\uffe4\001\002\000\020\015\uffd5\022" +
    "\uffd5\026\uffd5\027\uffd5\030\uffd5\033\uffd5\066\uffd5\001\002" +
    "\000\036\005\uffbe\036\143\041\073\042\070\043\077\044" +
    "\075\045\072\046\100\047\101\050\074\051\076\052\071" +
    "\053\067\054\102\001\002\000\004\005\142\001\002\000" +
    "\004\016\136\001\002\000\026\012\054\013\060\016\056" +
    "\042\051\055\065\070\063\071\055\072\061\073\052\074" +
    "\064\001\002\000\034\017\140\041\073\042\070\043\077" +
    "\044\075\045\072\046\100\047\101\050\074\051\076\052" +
    "\071\053\067\054\102\001\002\000\032\005\uffbb\012\054" +
    "\013\060\016\056\036\135\042\051\055\065\070\063\071" +
    "\055\072\061\073\052\074\064\001\002\000\004\005\uffbc" +
    "\001\002\000\042\004\uffcf\015\uffcf\022\uffcf\024\uffcf\026" +
    "\uffcf\027\uffcf\030\uffcf\031\uffcf\033\uffcf\034\uffcf\035\uffcf" +
    "\037\uffcf\062\uffcf\063\uffcf\066\uffcf\070\uffcf\001\002\000" +
    "\004\016\144\001\002\000\026\012\054\013\060\016\056" +
    "\042\051\055\065\070\063\071\055\072\061\073\052\074" +
    "\064\001\002\000\034\017\146\041\073\042\070\043\077" +
    "\044\075\045\072\046\100\047\101\050\074\051\076\052" +
    "\071\053\067\054\102\001\002\000\032\005\uffbb\012\054" +
    "\013\060\016\056\036\135\042\051\055\065\070\063\071" +
    "\055\072\061\073\052\074\064\001\002\000\004\005\uffbd" +
    "\001\002\000\004\005\151\001\002\000\042\004\uffd0\015" +
    "\uffd0\022\uffd0\024\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0" +
    "\033\uffd0\034\uffd0\035\uffd0\037\uffd0\062\uffd0\063\uffd0\066" +
    "\uffd0\070\uffd0\001\002\000\004\070\166\001\002\000\032" +
    "\012\054\013\060\016\056\017\157\040\156\042\051\055" +
    "\065\070\063\071\055\072\061\073\052\074\064\001\002" +
    "\000\004\017\165\001\002\000\036\010\163\017\uffb8\041" +
    "\073\042\070\043\077\044\075\045\072\046\100\047\101" +
    "\050\074\051\076\052\071\053\067\054\102\001\002\000" +
    "\004\070\160\001\002\000\004\005\uffc7\001\002\000\006" +
    "\010\161\017\uffb7\001\002\000\030\012\054\013\060\016" +
    "\056\040\156\042\051\055\065\070\063\071\055\072\061" +
    "\073\052\074\064\001\002\000\004\017\uffb9\001\002\000" +
    "\030\012\054\013\060\016\056\040\156\042\051\055\065" +
    "\070\063\071\055\072\061\073\052\074\064\001\002\000" +
    "\004\017\uffba\001\002\000\004\005\uffc8\001\002\000\010" +
    "\006\ufff2\007\ufff2\010\152\001\002\000\006\006\ufff3\007" +
    "\ufff3\001\002\000\034\025\171\041\073\042\070\043\077" +
    "\044\075\045\072\046\100\047\101\050\074\051\076\052" +
    "\071\053\067\054\102\001\002\000\032\004\004\024\040" +
    "\026\uffd4\027\uffd4\030\uffd4\031\032\034\042\035\043\037" +
    "\030\062\046\063\033\070\041\001\002\000\010\026\uffc4" +
    "\027\uffc4\030\174\001\002\000\006\026\202\027\uffc1\001" +
    "\002\000\026\012\054\013\060\016\056\042\051\055\065" +
    "\070\063\071\055\072\061\073\052\074\064\001\002\000" +
    "\010\026\uffc4\027\uffc4\030\174\001\002\000\006\026\uffc5" +
    "\027\uffc5\001\002\000\034\025\200\041\073\042\070\043" +
    "\077\044\075\045\072\046\100\047\101\050\074\051\076" +
    "\052\071\053\067\054\102\001\002\000\032\004\004\024" +
    "\040\026\uffd4\027\uffd4\030\uffd4\031\032\034\042\035\043" +
    "\037\030\062\046\063\033\070\041\001\002\000\010\026" +
    "\uffc3\027\uffc3\030\uffc3\001\002\000\026\004\004\024\040" +
    "\027\uffd4\031\032\034\042\035\043\037\030\062\046\063" +
    "\033\070\041\001\002\000\004\027\204\001\002\000\004" +
    "\005\uffc6\001\002\000\004\027\uffc2\001\002\000\020\015" +
    "\uffd6\022\uffd6\026\uffd6\027\uffd6\030\uffd6\033\uffd6\066\uffd6" +
    "\001\002\000\042\004\uffcd\015\uffcd\022\uffcd\024\uffcd\026" +
    "\uffcd\027\uffcd\030\uffcd\031\uffcd\033\uffcd\034\uffcd\035\uffcd" +
    "\037\uffcd\062\uffcd\063\uffcd\066\uffcd\070\uffcd\001\002\000" +
    "\042\004\uffd2\015\uffd2\022\uffd2\024\uffd2\026\uffd2\027\uffd2" +
    "\030\uffd2\031\uffd2\033\uffd2\034\uffd2\035\uffd2\037\uffd2\062" +
    "\uffd2\063\uffd2\066\uffd2\070\uffd2\001\002\000\042\004\uffcc" +
    "\015\uffcc\022\uffcc\024\uffcc\026\uffcc\027\uffcc\030\uffcc\031" +
    "\uffcc\033\uffcc\034\uffcc\035\uffcc\037\uffcc\062\uffcc\063\uffcc" +
    "\066\uffcc\070\uffcc\001\002\000\004\007\213\001\002\000" +
    "\026\012\054\013\060\016\056\042\051\055\065\070\063" +
    "\071\055\072\061\073\052\074\064\001\002\000\034\041" +
    "\073\042\070\043\077\044\075\045\072\046\100\047\101" +
    "\050\074\051\076\052\071\053\067\054\102\064\215\001" +
    "\002\000\026\012\054\013\060\016\056\042\051\055\065" +
    "\070\063\071\055\072\061\073\052\074\064\001\002\000" +
    "\034\041\073\042\070\043\077\044\075\045\072\046\100" +
    "\047\101\050\074\051\076\052\071\053\067\054\102\065" +
    "\217\001\002\000\026\012\054\013\060\016\056\042\051" +
    "\055\065\070\063\071\055\072\061\073\052\074\064\001" +
    "\002\000\034\032\221\041\073\042\070\043\077\044\075" +
    "\045\072\046\100\047\101\050\074\051\076\052\071\053" +
    "\067\054\102\001\002\000\026\004\004\024\040\031\032" +
    "\034\042\035\043\037\030\062\046\063\033\066\uffd4\070" +
    "\041\001\002\000\004\066\223\001\002\000\004\005\uffbf" +
    "\001\002\000\034\032\225\041\073\042\070\043\077\044" +
    "\075\045\072\046\100\047\101\050\074\051\076\052\071" +
    "\053\067\054\102\001\002\000\026\004\004\024\040\031" +
    "\032\033\uffd4\034\042\035\043\037\030\062\046\063\033" +
    "\070\041\001\002\000\004\033\227\001\002\000\004\005" +
    "\uffc0\001\002\000\026\012\054\013\060\016\056\042\051" +
    "\055\065\070\063\071\055\072\061\073\052\074\064\001" +
    "\002\000\004\005\232\001\002\000\042\004\uffd3\015\uffd3" +
    "\022\uffd3\024\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\033" +
    "\uffd3\034\uffd3\035\uffd3\037\uffd3\062\uffd3\063\uffd3\066\uffd3" +
    "\070\uffd3\001\002\000\004\005\234\001\002\000\042\004" +
    "\uffce\015\uffce\022\uffce\024\uffce\026\uffce\027\uffce\030\uffce" +
    "\031\uffce\033\uffce\034\uffce\035\uffce\037\uffce\062\uffce\063" +
    "\uffce\066\uffce\070\uffce\001\002\000\014\056\023\057\020" +
    "\060\021\061\025\067\024\001\002\000\004\006\uffdf\001" +
    "\002\000\014\056\023\057\020\060\021\061\025\067\024" +
    "\001\002\000\006\010\241\017\uffe0\001\002\000\004\070" +
    "\243\001\002\000\004\017\uffe3\001\002\000\004\006\244" +
    "\001\002\000\014\056\023\057\020\060\021\061\025\067" +
    "\024\001\002\000\006\010\241\017\uffe0\001\002\000\004" +
    "\017\uffe1\001\002\000\004\070\260\001\002\000\012\002" +
    "\ufff9\004\004\014\011\021\247\001\002\000\012\002\ufff9" +
    "\004\004\014\011\021\247\001\002\000\012\002\ufff9\004" +
    "\004\014\011\021\247\001\002\000\004\002\001\001\002" +
    "\000\012\002\ufff9\004\004\014\011\021\247\001\002\000" +
    "\004\002\ufffa\001\002\000\004\002\ufffc\001\002\000\004" +
    "\002\ufffb\001\002\000\004\016\261\001\002\000\010\017" +
    "\uffdb\023\262\070\263\001\002\000\004\070\302\001\002" +
    "\000\004\006\uffd8\001\002\000\004\017\276\001\002\000" +
    "\004\006\266\001\002\000\014\056\023\057\020\060\021" +
    "\061\025\067\024\001\002\000\006\010\270\017\uffd9\001" +
    "\002\000\006\023\262\070\263\001\002\000\004\017\uffdc" +
    "\001\002\000\004\006\273\001\002\000\014\056\023\057" +
    "\020\060\021\061\025\067\024\001\002\000\006\010\270" +
    "\017\uffd9\001\002\000\004\017\uffda\001\002\000\004\006" +
    "\277\001\002\000\026\004\004\022\uffd4\024\040\031\032" +
    "\034\042\035\043\037\030\062\046\063\033\070\041\001" +
    "\002\000\004\022\301\001\002\000\012\002\uffdd\004\uffdd" +
    "\014\uffdd\021\uffdd\001\002\000\004\006\uffd7\001\002\000" +
    "\004\021\uffff\001\002\000\004\021\ufffe\001\002\000\004" +
    "\002\000\001\002\000\006\006\310\007\311\001\002\000" +
    "\050\002\ufff8\004\ufff8\014\ufff8\015\ufff8\021\ufff8\022\ufff8" +
    "\024\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\033\ufff8\034" +
    "\ufff8\035\ufff8\037\ufff8\062\ufff8\063\ufff8\066\ufff8\070\ufff8" +
    "\001\002\000\014\056\023\057\020\060\021\061\025\067" +
    "\024\001\002\000\016\012\315\013\316\071\312\072\313" +
    "\073\317\074\321\001\002\000\006\005\uffed\010\uffed\001" +
    "\002\000\006\005\uffee\010\uffee\001\002\000\004\005\324" +
    "\001\002\000\006\005\uffeb\010\uffeb\001\002\000\006\005" +
    "\uffea\010\uffea\001\002\000\006\005\uffef\010\uffef\001\002" +
    "\000\006\005\ufff0\010\322\001\002\000\006\005\uffec\010" +
    "\uffec\001\002\000\016\012\315\013\316\071\312\072\313" +
    "\073\317\074\321\001\002\000\004\005\ufff1\001\002\000" +
    "\006\011\326\070\166\001\002\000\050\002\ufff6\004\ufff6" +
    "\014\ufff6\015\ufff6\021\ufff6\022\ufff6\024\ufff6\026\ufff6\027" +
    "\ufff6\030\ufff6\031\ufff6\033\ufff6\034\ufff6\035\ufff6\037\ufff6" +
    "\062\ufff6\063\ufff6\066\ufff6\070\ufff6\001\002\000\050\002" +
    "\ufff4\004\ufff4\014\ufff4\015\ufff4\021\ufff4\022\ufff4\024\ufff4" +
    "\026\ufff4\027\ufff4\030\ufff4\031\ufff4\033\ufff4\034\ufff4\035" +
    "\ufff4\037\ufff4\062\ufff4\063\ufff4\066\ufff4\070\ufff4\001\002" +
    "\000\004\005\330\001\002\000\006\011\332\070\166\001" +
    "\002\000\050\002\ufff7\004\ufff7\014\ufff7\015\ufff7\021\ufff7" +
    "\022\ufff7\024\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\033" +
    "\ufff7\034\ufff7\035\ufff7\037\ufff7\062\ufff7\063\ufff7\066\ufff7" +
    "\070\ufff7\001\002\000\050\002\ufff5\004\ufff5\014\ufff5\015" +
    "\ufff5\021\ufff5\022\ufff5\024\ufff5\026\ufff5\027\ufff5\030\ufff5" +
    "\031\ufff5\033\ufff5\034\ufff5\035\ufff5\037\ufff5\062\ufff5\063" +
    "\ufff5\066\ufff5\070\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\330\000\012\002\004\003\007\005\006\013\005\001" +
    "\001\000\006\006\306\007\305\001\001\000\002\001\001" +
    "\000\010\003\303\005\006\013\005\001\001\000\010\003" +
    "\302\005\006\013\005\001\001\000\004\016\247\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\021\037\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\005" +
    "\036\007\030\022\044\023\043\025\034\026\035\032\033" +
    "\040\046\001\001\000\010\024\061\033\232\036\132\001" +
    "\001\000\002\001\001\000\006\024\061\036\223\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\005\036\007\030\022\205\023\043" +
    "\025\034\026\035\032\033\040\046\001\001\000\006\024" +
    "\061\036\167\001\001\000\002\001\001\000\010\024\061" +
    "\033\147\036\132\001\001\000\010\024\061\033\133\036" +
    "\132\001\001\000\022\005\036\007\030\022\131\023\043" +
    "\025\034\026\035\032\033\040\046\001\001\000\002\001" +
    "\001\000\010\024\061\035\056\036\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\024\061\036\127\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\024\061\036\123\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\024" +
    "\061\036\065\001\001\000\002\001\001\000\006\024\061" +
    "\036\115\001\001\000\006\024\061\036\114\001\001\000" +
    "\006\024\061\036\113\001\001\000\006\024\061\036\112" +
    "\001\001\000\006\024\061\036\111\001\001\000\006\024" +
    "\061\036\110\001\001\000\006\024\061\036\107\001\001" +
    "\000\006\024\061\036\106\001\001\000\006\024\061\036" +
    "\105\001\001\000\006\024\061\036\104\001\001\000\006" +
    "\024\061\036\103\001\001\000\006\024\061\036\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\024" +
    "\061\035\117\036\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\024\061\035\126\036\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\024\061\036\136\001\001\000" +
    "\002\001\001\000\010\024\061\033\140\036\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\024\061\036\144\001\001\000\002\001\001\000\010" +
    "\024\061\033\146\036\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\166\001\001" +
    "\000\010\024\061\034\153\036\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\024\061\034\161\036\154\001" +
    "\001\000\002\001\001\000\010\024\061\034\163\036\154" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\005\036" +
    "\007\030\022\171\023\043\025\034\026\035\032\033\040" +
    "\046\001\001\000\006\027\172\030\174\001\001\000\004" +
    "\031\202\001\001\000\006\024\061\036\176\001\001\000" +
    "\006\027\175\030\174\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\005\036\007\030\022\200\023\043\025" +
    "\034\026\035\032\033\040\046\001\001\000\002\001\001" +
    "\000\022\005\036\007\030\022\204\023\043\025\034\026" +
    "\035\032\033\040\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\024\061\036\213\001\001\000\002\001\001\000" +
    "\006\024\061\036\215\001\001\000\002\001\001\000\006" +
    "\024\061\036\217\001\001\000\002\001\001\000\022\005" +
    "\036\007\030\022\221\023\043\025\034\026\035\032\033" +
    "\040\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\005\036\007\030\022\225\023\043" +
    "\025\034\026\035\032\033\040\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\024\061\035\230\036\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\021\037\235\001\001" +
    "\000\002\001\001\000\004\012\237\001\001\000\004\015" +
    "\241\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\244\001\001\000\004\015\245\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\004\252" +
    "\005\251\013\250\016\253\001\001\000\012\004\256\005" +
    "\251\013\250\016\253\001\001\000\012\004\255\005\251" +
    "\013\250\016\253\001\001\000\002\001\001\000\012\004" +
    "\254\005\251\013\250\016\253\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\263\021\264\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\266\001\001\000\004\020\270\001\001\000\004\021\271" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\273\001\001\000\004\020\274\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\005\036\007\030\022\277\023" +
    "\043\025\034\026\035\032\033\040\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\326\001\001\000\006\010" +
    "\313\011\317\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\322\011\317\001\001\000\002\001\001\000\006\006" +
    "\324\007\305\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\330\007\305\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public Symbol do_action(
    int                        act_num,
    lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws Exception
    {
      /* Symbol object for return from actions */
      Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= Iter1 Procedure Iter2 
            {
              Object RESULT =null;
		int varFuncsleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varFuncsright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object varFuncs = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mainProcleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mainProcright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object mainProc = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int varFuncProcleft = ((Symbol)CUP$parser$stack.peek()).left;
		int varFuncProcright = ((Symbol)CUP$parser$stack.peek()).right;
		Object varFuncProc = (Object)((Symbol) CUP$parser$stack.peek()).value;
		
                                                  List<VarDeclNode> varDeclarations = new ArrayList<>();
                                                  List<FunctionNode> functions = new ArrayList<>();
                                                  List<ProcedureNode> procedures = new ArrayList<>(List.of(((ProcedureNode) mainProc)));

                                                  for (Node node : (List<Node>) varFuncs) {
                                                      if (node instanceof VarDeclNode) varDeclarations.add((VarDeclNode) node);
                                                      else if (node instanceof FunctionNode) functions.add((FunctionNode) node);
                                                  }

                                                  for (Node node : (List<Node>) varFuncProc) {
                                                      if (node instanceof VarDeclNode) varDeclarations.add((VarDeclNode) node);
                                                      else if (node instanceof FunctionNode) functions.add((FunctionNode) node);
                                                      else if (node instanceof ProcedureNode) procedures.add((ProcedureNode) node);
                                                  }

                                                  RESULT = new ProgramNode(varDeclarations, functions, procedures);
                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Iter1 ::= VarDecl Iter1 
            {
              Object RESULT =null;
		int vardeclleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vardeclright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vardecl = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nodesleft = ((Symbol)CUP$parser$stack.peek()).left;
		int nodesright = ((Symbol)CUP$parser$stack.peek()).right;
		Object nodes = (Object)((Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<Node>) nodes).add(0, (VarDeclNode) vardecl); RESULT = nodes;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter1",1, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Iter1 ::= Function Iter1 
            {
              Object RESULT =null;
		int funcleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funcright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object func = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nodesleft = ((Symbol)CUP$parser$stack.peek()).left;
		int nodesright = ((Symbol)CUP$parser$stack.peek()).right;
		Object nodes = (Object)((Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<Node>) nodes).add(0, (FunctionNode) func); RESULT = nodes;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter1",1, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Iter1 ::= 
            {
              Object RESULT =null;
		RESULT = new ArrayList<Node>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter1",1, ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Iter2 ::= VarDecl Iter2 
            {
              Object RESULT =null;
		int vardeclleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vardeclright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vardecl = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nodesleft = ((Symbol)CUP$parser$stack.peek()).left;
		int nodesright = ((Symbol)CUP$parser$stack.peek()).right;
		Object nodes = (Object)((Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<Node>) nodes).add(0, (VarDeclNode) vardecl); RESULT = nodes;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter2",2, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Iter2 ::= Function Iter2 
            {
              Object RESULT =null;
		int funcleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funcright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object func = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nodesleft = ((Symbol)CUP$parser$stack.peek()).left;
		int nodesright = ((Symbol)CUP$parser$stack.peek()).right;
		Object nodes = (Object)((Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<Node>) nodes).add(0, (FunctionNode) func); RESULT =  nodes;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter2",2, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Iter2 ::= Procedure Iter2 
            {
              Object RESULT =null;
		int procleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int procright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object proc = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nodesleft = ((Symbol)CUP$parser$stack.peek()).left;
		int nodesright = ((Symbol)CUP$parser$stack.peek()).right;
		Object nodes = (Object)((Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<Node>) nodes).add(0, (ProcedureNode) proc); RESULT =  nodes;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter2",2, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Iter2 ::= 
            {
              Object RESULT =null;
		RESULT = new ArrayList<Node>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter2",2, ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VarDecl ::= VAR Decls 
            {
              Object RESULT =null;
		int declsleft = ((Symbol)CUP$parser$stack.peek()).left;
		int declsright = ((Symbol)CUP$parser$stack.peek()).right;
		Object decls = (Object)((Symbol) CUP$parser$stack.peek()).value;
		VarDeclNode varDeclNode = new VarDeclNode((List<VarSingleDeclNode>) decls); RESULT =  varDeclNode;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Decls ::= Ids COLON Type SEMI Decls 
            {
              Object RESULT =null;
		int idsleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idsright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object ids = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typeleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object type = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int declsleft = ((Symbol)CUP$parser$stack.peek()).left;
		int declsright = ((Symbol)CUP$parser$stack.peek()).right;
		Object decls = (Object)((Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<VarSingleDeclNode>)decls).add(0, new VarSingleDeclNode((ArrayList<IdNode>) ids, (String) type, null)); RESULT = decls;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",4, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Decls ::= Ids ASSIGN Consts SEMI Decls 
            {
              Object RESULT =null;
		int idsleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idsright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object ids = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int constsleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int constsright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object consts = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int declsleft = ((Symbol)CUP$parser$stack.peek()).left;
		int declsright = ((Symbol)CUP$parser$stack.peek()).right;
		Object decls = (Object)((Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<VarSingleDeclNode>)decls).add(0, new VarSingleDeclNode((ArrayList<IdNode>) ids, null, (ArrayList<ConstNode>) consts)); RESULT = decls;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",4, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Decls ::= Ids COLON Type SEMI ENDVAR 
            {
              Object RESULT =null;
		int idsleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idsright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object ids = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typeleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object type = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ArrayList<VarSingleDeclNode> declarations = new ArrayList<VarSingleDeclNode>(); declarations.add(0, new VarSingleDeclNode((ArrayList<IdNode>) ids, (String) type,  null)); RESULT = declarations;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",4, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Decls ::= Ids ASSIGN Consts SEMI ENDVAR 
            {
              Object RESULT =null;
		int idsleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idsright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object ids = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int constsleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int constsright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object consts = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ArrayList<VarSingleDeclNode> declarations = new ArrayList<VarSingleDeclNode>(); declarations.add(0, new VarSingleDeclNode((ArrayList<IdNode>) ids, null, (ArrayList<ConstNode>) consts)); RESULT = declarations;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",4, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Ids ::= ID COMMA Ids 
            {
              Object RESULT =null;
		int nameleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idsleft = ((Symbol)CUP$parser$stack.peek()).left;
		int idsright = ((Symbol)CUP$parser$stack.peek()).right;
		Object ids = (Object)((Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<IdNode>) ids).add(0, new IdNode((String) name)); RESULT = ids;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ids",5, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Ids ::= ID 
            {
              Object RESULT =null;
		int nameleft = ((Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((Symbol) CUP$parser$stack.peek()).value;
		ArrayList<IdNode> ids = new ArrayList<IdNode>();  ids.add(0, new IdNode((String) name)); RESULT = ids;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ids",5, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Consts ::= Const COMMA Consts 
            {
              Object RESULT =null;
		int cleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int constsleft = ((Symbol)CUP$parser$stack.peek()).left;
		int constsright = ((Symbol)CUP$parser$stack.peek()).right;
		Object consts = (Object)((Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<ConstNode>) consts).add(0, (ConstNode) c); RESULT = consts;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Consts",6, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Consts ::= Const 
            {
              Object RESULT =null;
		int cleft = ((Symbol)CUP$parser$stack.peek()).left;
		int cright = ((Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((Symbol) CUP$parser$stack.peek()).value;
		ArrayList<ConstNode> consts = new ArrayList<ConstNode>();  consts.add(0, (ConstNode) c); RESULT = consts;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Consts",6, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Const ::= REAL_CONST 
            {
              Object RESULT =null;
		int valueleft = ((Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ConstNode(Float.parseFloat(value));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",7, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Const ::= INTEGER_CONST 
            {
              Object RESULT =null;
		int valueleft = ((Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ConstNode(Integer.parseInt(value));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",7, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Const ::= STRING_CONST 
            {
              Object RESULT =null;
		int valueleft = ((Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ConstNode((String) value);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",7, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Const ::= CHAR_CONST 
            {
              Object RESULT =null;
		int valueleft = ((Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((Symbol) CUP$parser$stack.peek()).value;
		Character c = ((String) value).charAt(0); RESULT = new ConstNode((Character) c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",7, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Const ::= TRUE 
            {
              Object RESULT =null;
		RESULT = new ConstNode(true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",7, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Const ::= FALSE 
            {
              Object RESULT =null;
		RESULT = new ConstNode(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",7, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Type ::= REAL 
            {
              Object RESULT =null;
		int typeleft = ((Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((Symbol) CUP$parser$stack.peek()).value;
		RESULT =  "real";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Type ::= INTEGER 
            {
              Object RESULT =null;
		int typeleft = ((Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((Symbol) CUP$parser$stack.peek()).value;
		RESULT =  "integer";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Type ::= STRING 
            {
              Object RESULT =null;
		int typeleft = ((Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((Symbol) CUP$parser$stack.peek()).value;
		RESULT =  "string";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Type ::= BOOLEAN 
            {
              Object RESULT =null;
		int typeleft = ((Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((Symbol) CUP$parser$stack.peek()).value;
		RESULT =  "boolean";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Type ::= CHAR 
            {
              Object RESULT =null;
		int typeleft = ((Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = "char";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Function ::= FUNCTION ID LPAR FuncParams RPAR TYPERETURN Types COLON Body ENDFUNCTION 
            {
              Object RESULT =null;
		int nameleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int nameright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String name = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int paramsleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int paramsright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object params = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int typesleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typesright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object types = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new FunctionNode((String) name, (ArrayList<IdNode>) params, (ArrayList<String>) types, (BodyNode) b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Function",9, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FuncParams ::= ID COLON Type OtherFuncParams 
            {
              Object RESULT =null;
		int nameleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object type = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int paramsleft = ((Symbol)CUP$parser$stack.peek()).left;
		int paramsright = ((Symbol)CUP$parser$stack.peek()).right;
		Object params = (Object)((Symbol) CUP$parser$stack.peek()).value;
		IdNode param = new IdNode((String) name, false);  param.idType = (String) type; param.isFuncParam = (boolean) true; ((ArrayList<IdNode>) params).add(0, param); RESULT = params;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncParams",10, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FuncParams ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncParams",10, ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OtherFuncParams ::= COMMA ID COLON Type OtherFuncParams 
            {
              Object RESULT =null;
		int nameleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object type = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int paramsleft = ((Symbol)CUP$parser$stack.peek()).left;
		int paramsright = ((Symbol)CUP$parser$stack.peek()).right;
		Object params = (Object)((Symbol) CUP$parser$stack.peek()).value;
		IdNode param = new IdNode((String) name, false);  param.idType = (String) type; param.isFuncParam = (boolean) true; ((ArrayList<IdNode>) params).add(0, param); RESULT = params;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherFuncParams",11, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OtherFuncParams ::= 
            {
              Object RESULT =null;
		RESULT = new ArrayList<IdNode>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherFuncParams",11, ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Types ::= Type COMMA Types 
            {
              Object RESULT =null;
		int typeleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object type = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typesleft = ((Symbol)CUP$parser$stack.peek()).left;
		int typesright = ((Symbol)CUP$parser$stack.peek()).right;
		Object types = (Object)((Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<String>) types).add(0, (String) type); RESULT = types;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Types",29, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Types ::= Type 
            {
              Object RESULT =null;
		int typeleft = ((Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((Symbol) CUP$parser$stack.peek()).value;
		ArrayList<String> types = new ArrayList<String>();  types.add(0, (String) type); RESULT = types;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Types",29, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Procedure ::= PROCEDURE ID LPAR ProcParams RPAR COLON Body ENDPROCEDURE 
            {
              Object RESULT =null;
		int nameleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String name = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int paramsleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int paramsright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object params = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ProcedureNode((String) name, (ArrayList<IdNode>) params, (BodyNode) b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Procedure",12, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ProcParams ::= ProcParamId COLON Type OtherProcParams 
            {
              Object RESULT =null;
		int paramleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int paramright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object param = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object type = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int paramsleft = ((Symbol)CUP$parser$stack.peek()).left;
		int paramsright = ((Symbol)CUP$parser$stack.peek()).right;
		Object params = (Object)((Symbol) CUP$parser$stack.peek()).value;
		((IdNode) param).idType = (String) type; ((ArrayList<IdNode>) params).add(0, (IdNode) param); RESULT = params;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcParams",13, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ProcParams ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcParams",13, ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OtherProcParams ::= COMMA ProcParamId COLON Type OtherProcParams 
            {
              Object RESULT =null;
		int paramleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int paramright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object param = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object type = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int paramsleft = ((Symbol)CUP$parser$stack.peek()).left;
		int paramsright = ((Symbol)CUP$parser$stack.peek()).right;
		Object params = (Object)((Symbol) CUP$parser$stack.peek()).value;
		((IdNode) param).idType = (String) type; ((ArrayList<IdNode>) params).add(0, (IdNode) param); RESULT = params;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherProcParams",14, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OtherProcParams ::= 
            {
              Object RESULT =null;
		RESULT = new ArrayList<IdNode>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherProcParams",14, ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ProcParamId ::= ID 
            {
              Object RESULT =null;
		int nameleft = ((Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IdNode((String) name, false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcParamId",15, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ProcParamId ::= OUT ID 
            {
              Object RESULT =null;
		int nameleft = ((Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IdNode((String) name, true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcParamId",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Body ::= VarDecl Body 
            {
              Object RESULT =null;
		int declleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int declright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object decl = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((Symbol)CUP$parser$stack.peek()).left;
		int bright = ((Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((Symbol) CUP$parser$stack.peek()).value;
		((BodyNode) b).nodes.add(0, (VarDeclNode) decl); RESULT = b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",16, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Body ::= Stat Body 
            {
              Object RESULT =null;
		int statleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object stat = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((Symbol)CUP$parser$stack.peek()).left;
		int bright = ((Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((Symbol) CUP$parser$stack.peek()).value;
		((BodyNode) b).nodes.add(0, (StatementNode) stat); RESULT = b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",16, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Body ::= 
            {
              Object RESULT =null;
		 RESULT = new BodyNode(new ArrayList<Node>());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",16, ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Stat ::= Ids ASSIGN Exprs SEMI 
            {
              Object RESULT =null;
		int idsleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idsright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object ids = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprsleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprsright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exprs = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new AssignStatementNode((ArrayList<IdNode>) ids, (ArrayList<ExprNode>) exprs);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",17, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Stat ::= ProcCall SEMI 
            {
              Object RESULT =null;
		int statleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object stat = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = stat;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",17, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Stat ::= RETURN Exprs SEMI 
            {
              Object RESULT =null;
		int exprsleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprsright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exprs = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ReturnStatementNode((ArrayList<ExprNode>) exprs);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",17, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Stat ::= WRITE IOArgs SEMI 
            {
              Object RESULT =null;
		int argsleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object args = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new WriteStatementNode((ArrayList<ExprNode>) args, false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",17, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Stat ::= WRITERETURN IOArgs SEMI 
            {
              Object RESULT =null;
		int argsleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object args = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new WriteStatementNode((ArrayList<ExprNode>) args, true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",17, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Stat ::= READ IOArgs SEMI 
            {
              Object RESULT =null;
		int argsleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object args = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ReadStatementNode((ArrayList<ExprNode>) args);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",17, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Stat ::= IfStat SEMI 
            {
              Object RESULT =null;
		int statleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object stat = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = stat;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",17, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Stat ::= WhileStat SEMI 
            {
              Object RESULT =null;
		int statleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object stat = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = stat;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",17, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Stat ::= ForStat SEMI 
            {
              Object RESULT =null;
		int statleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object stat = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = stat;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",17, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FunCall ::= ID LPAR Exprs RPAR 
            {
              Object RESULT =null;
		int nameleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprsleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprsright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exprs = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new FunCallNode((String) name, (ArrayList<ExprNode>) exprs);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",18, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FunCall ::= ID LPAR RPAR 
            {
              Object RESULT =null;
		int nameleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new FunCallNode((String) name, null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",18, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ProcCall ::= ID LPAR ProcExprs RPAR 
            {
              Object RESULT =null;
		int nameleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argumentsleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argumentsright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arguments = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ProcCallNode((String) name, (ArrayList<ProcArgumentNode>) arguments);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcCall",19, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ProcCall ::= ID LPAR RPAR 
            {
              Object RESULT =null;
		int nameleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new ProcCallNode((String) name, null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcCall",19, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // IfStat ::= IF Expr THEN Body Elifs Else ENDIF 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object b = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elifsleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elifsright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object elifs = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elsleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elsright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object els = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new IfStatementNode((ExprNode) e, (BodyNode) b, (ArrayList<ElifNode>) elifs, (BodyNode) els);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStat",20, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Elifs ::= Elif Elifs 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elifsleft = ((Symbol)CUP$parser$stack.peek()).left;
		int elifsright = ((Symbol)CUP$parser$stack.peek()).right;
		Object elifs = (Object)((Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<ElifNode>) elifs).add(0, (ElifNode) e); RESULT = elifs;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Elifs",21, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Elifs ::= 
            {
              Object RESULT =null;
		 RESULT = new ArrayList<ElifNode>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Elifs",21, ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Elif ::= ELIF Expr THEN Body 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((Symbol)CUP$parser$stack.peek()).left;
		int bright = ((Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ElifNode((ExprNode) e, (BodyNode) b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Elif",22, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Else ::= ELSE Body 
            {
              Object RESULT =null;
		int bleft = ((Symbol)CUP$parser$stack.peek()).left;
		int bright = ((Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((Symbol) CUP$parser$stack.peek()).value;
		RESULT =  b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",23, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Else ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",23, ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // WhileStat ::= WHILE Expr DO Body ENDWHILE 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new WhileStatementNode((ExprNode) e, (BodyNode) b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStat",24, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ForStat ::= FOR ID ASSIGN Expr TO Expr STEP Expr DO Body ENDFOR 
            {
              Object RESULT =null;
		int nameleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int nameright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String name = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int e1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object e1 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e2left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e2right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e2 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e3left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e3right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e3 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 ArrayList<IdNode> idNodes = new ArrayList<IdNode>(); idNodes.add(0, (IdNode) new IdNode((String) name)); ArrayList<ExprNode> exprs = new ArrayList<ExprNode>(); exprs.add(0, (ExprNode) e1); RESULT = new ForStatementNode((String) name, (AssignStatementNode) new AssignStatementNode(idNodes, exprs), (ExprNode) e2, (ExprNode) e3, (BodyNode) b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ForStat",30, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // IOArgs ::= Expr 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.peek()).left;
		int eright = ((Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((Symbol) CUP$parser$stack.peek()).value;
		ArrayList<ExprNode> exprs = new ArrayList<ExprNode>();  exprs.add(0, (ExprNode) e); RESULT = exprs;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IOArgs",25, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // IOArgs ::= Expr DOLLARSIGN LPAR Expr RPAR IOArgs 
            {
              Object RESULT =null;
		int e1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e1 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e2 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprsleft = ((Symbol)CUP$parser$stack.peek()).left;
		int exprsright = ((Symbol)CUP$parser$stack.peek()).right;
		Object exprs = (Object)((Symbol) CUP$parser$stack.peek()).value;
		((ExprNode) e2).isDollar = true; ((ArrayList<ExprNode>) exprs).add(0, (ExprNode) e2); ((ArrayList<ExprNode>) exprs).add(0, (ExprNode) e1); RESULT = exprs;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IOArgs",25, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // IOArgs ::= DOLLARSIGN LPAR Expr RPAR IOArgs 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprsleft = ((Symbol)CUP$parser$stack.peek()).left;
		int exprsright = ((Symbol)CUP$parser$stack.peek()).right;
		Object exprs = (Object)((Symbol) CUP$parser$stack.peek()).value;
		((ExprNode) e).isDollar = true; ((ArrayList<ExprNode>) exprs).add(0, (ExprNode) e); RESULT = exprs;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IOArgs",25, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // IOArgs ::= 
            {
              Object RESULT =null;
		RESULT = new ArrayList<ExprNode>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IOArgs",25, ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ProcExprs ::= Expr COMMA ProcExprs 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int argumentsleft = ((Symbol)CUP$parser$stack.peek()).left;
		int argumentsright = ((Symbol)CUP$parser$stack.peek()).right;
		Object arguments = (Object)((Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<ProcArgumentNode>) arguments).add(0, new ProcArgumentNode((ExprNode) e)); RESULT = arguments;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",26, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ProcExprs ::= REF ID COMMA ProcExprs 
            {
              Object RESULT =null;
		int nameleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int argumentsleft = ((Symbol)CUP$parser$stack.peek()).left;
		int argumentsright = ((Symbol)CUP$parser$stack.peek()).right;
		Object arguments = (Object)((Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<ProcArgumentNode>) arguments).add(0, new ProcArgumentNode((String) name)); RESULT = arguments;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",26, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ProcExprs ::= Expr 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.peek()).left;
		int eright = ((Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((Symbol) CUP$parser$stack.peek()).value;
		ArrayList<ProcArgumentNode> arguments = new ArrayList<ProcArgumentNode>();  arguments.add(0, new ProcArgumentNode((ExprNode) e)); RESULT = arguments;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",26, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ProcExprs ::= REF ID 
            {
              Object RESULT =null;
		int nameleft = ((Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((Symbol) CUP$parser$stack.peek()).value;
		ArrayList<ProcArgumentNode> arguments = new ArrayList<ProcArgumentNode>();  arguments.add(0, new ProcArgumentNode((String) name)); RESULT = arguments;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",26, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Exprs ::= Expr COMMA Exprs 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprsleft = ((Symbol)CUP$parser$stack.peek()).left;
		int exprsright = ((Symbol)CUP$parser$stack.peek()).right;
		Object exprs = (Object)((Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<ExprNode>) exprs).add(0, (ExprNode) e); RESULT = exprs;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exprs",27, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Exprs ::= Expr 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.peek()).left;
		int eright = ((Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<ExprNode> exprs = new ArrayList<ExprNode>();   exprs.add(0, (ExprNode) e); RESULT = exprs;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exprs",27, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= FunCall 
            {
              Object RESULT =null;
		int funleft = ((Symbol)CUP$parser$stack.peek()).left;
		int funright = ((Symbol)CUP$parser$stack.peek()).right;
		Object fun = (Object)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode("funcall", (FunCallNode) fun);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= REAL_CONST 
            {
              Object RESULT =null;
		int valleft = ((Symbol)CUP$parser$stack.peek()).left;
		int valright = ((Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode("real", new ConstNode(Float.parseFloat(val)));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= INTEGER_CONST 
            {
              Object RESULT =null;
		int valleft = ((Symbol)CUP$parser$stack.peek()).left;
		int valright = ((Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode("integer", new ConstNode(Integer.parseInt(val)));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= STRING_CONST 
            {
              Object RESULT =null;
		int valleft = ((Symbol)CUP$parser$stack.peek()).left;
		int valright = ((Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode("string", new ConstNode((String) val));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= CHAR_CONST 
            {
              Object RESULT =null;
		int valleft = ((Symbol)CUP$parser$stack.peek()).left;
		int valright = ((Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((Symbol) CUP$parser$stack.peek()).value;
		Character c = ((String) val).charAt(0); RESULT = new ExprNode("char", new ConstNode((Character) c));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= ID 
            {
              Object RESULT =null;
		int nameleft = ((Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode("id", new IdNode((String) name));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= TRUE 
            {
              Object RESULT =null;
		RESULT = new ExprNode("true", new ConstNode(true));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= FALSE 
            {
              Object RESULT =null;
		RESULT = new ExprNode("false", new ConstNode(false));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= Expr PLUS Expr 
            {
              Object RESULT =null;
		int e1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode("add", (ExprNode) e1, (ExprNode) e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= Expr MINUS Expr 
            {
              Object RESULT =null;
		int e1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode("sub", (ExprNode) e1, (ExprNode) e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= Expr TIMES Expr 
            {
              Object RESULT =null;
		int e1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode("times", (ExprNode) e1, (ExprNode) e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= Expr DIV Expr 
            {
              Object RESULT =null;
		int e1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode("div", (ExprNode) e1, (ExprNode) e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= Expr AND Expr 
            {
              Object RESULT =null;
		int e1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode("and", (ExprNode) e1, (ExprNode) e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= Expr OR Expr 
            {
              Object RESULT =null;
		int e1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode("or", (ExprNode) e1, (ExprNode) e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= Expr GT Expr 
            {
              Object RESULT =null;
		int e1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode("gt", (ExprNode) e1, (ExprNode) e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= Expr GE Expr 
            {
              Object RESULT =null;
		int e1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode("ge", (ExprNode) e1, (ExprNode) e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expr ::= Expr LT Expr 
            {
              Object RESULT =null;
		int e1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode("lt", (ExprNode) e1, (ExprNode) e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expr ::= Expr LE Expr 
            {
              Object RESULT =null;
		int e1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode("le", (ExprNode) e1, (ExprNode) e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expr ::= Expr EQ Expr 
            {
              Object RESULT =null;
		int e1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode("eq", (ExprNode) e1, (ExprNode) e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Expr ::= Expr NE Expr 
            {
              Object RESULT =null;
		int e1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode("ne", (ExprNode) e1, (ExprNode) e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Expr ::= LPAR Expr RPAR 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ExprNode("pare", (ExprNode) e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Expr ::= MINUS Expr 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.peek()).left;
		int eright = ((Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode("uminus", (ExprNode) e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Expr ::= NOT Expr 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$parser$stack.peek()).left;
		int eright = ((Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode("not", (ExprNode) e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
