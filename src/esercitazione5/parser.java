
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package esercitazione5;

import java_cup.runtime.*;
import nodes.*;
import nodes.statements.*;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\005\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\002\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\002\000" +
    "\002\005\004\000\002\006\007\000\002\006\007\000\002" +
    "\006\007\000\002\006\007\000\002\007\005\000\002\007" +
    "\003\000\002\010\005\000\002\010\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\013\014\000\002\014" +
    "\006\000\002\014\002\000\002\015\007\000\002\015\002" +
    "\000\002\037\005\000\002\037\003\000\002\016\012\000" +
    "\002\017\006\000\002\017\002\000\002\020\007\000\002" +
    "\020\002\000\002\021\003\000\002\021\004\000\002\022" +
    "\004\000\002\022\004\000\002\022\002\000\002\023\006" +
    "\000\002\023\004\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\004\000\002" +
    "\023\004\000\002\024\006\000\002\024\005\000\002\025" +
    "\006\000\002\025\005\000\002\026\011\000\002\027\004" +
    "\000\002\027\002\000\002\030\006\000\002\031\004\000" +
    "\002\031\002\000\002\032\007\000\002\033\003\000\002" +
    "\033\010\000\002\033\007\000\002\033\002\000\002\034" +
    "\005\000\002\034\006\000\002\034\003\000\002\034\004" +
    "\000\002\035\005\000\002\035\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\005\000\002\036\005\000\002\036\005\000\002\036\005" +
    "\000\002\036\005\000\002\036\005\000\002\036\005\000" +
    "\002\036\005\000\002\036\005\000\002\036\005\000\002" +
    "\036\005\000\002\036\005\000\002\036\005\000\002\036" +
    "\004\000\002\036\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\310\000\010\004\004\014\011\021\ufffd\001\002\000" +
    "\004\063\161\001\002\000\004\002\266\001\002\000\010" +
    "\004\004\014\011\021\ufffd\001\002\000\010\004\004\014" +
    "\011\021\ufffd\001\002\000\004\021\230\001\002\000\004" +
    "\063\012\001\002\000\004\016\013\001\002\000\006\017" +
    "\uffe4\063\014\001\002\000\004\006\220\001\002\000\004" +
    "\017\016\001\002\000\004\020\017\001\002\000\012\056" +
    "\023\057\020\060\021\061\024\001\002\000\012\005\uffe9" +
    "\006\uffe9\010\uffe9\017\uffe9\001\002\000\012\005\uffe8\006" +
    "\uffe8\010\uffe8\017\uffe8\001\002\000\006\006\uffe0\010\216" +
    "\001\002\000\012\005\uffea\006\uffea\010\uffea\017\uffea\001" +
    "\002\000\012\005\uffe7\006\uffe7\010\uffe7\017\uffe7\001\002" +
    "\000\004\006\026\001\002\000\024\004\004\015\uffd6\024" +
    "\036\031\031\034\040\035\041\037\027\062\044\063\037" +
    "\001\002\000\030\005\uffbf\012\051\013\054\016\052\036" +
    "\130\042\045\055\060\063\057\064\050\065\056\066\046" +
    "\001\002\000\004\007\211\001\002\000\024\012\051\013" +
    "\054\016\052\042\045\055\060\063\057\064\050\065\056" +
    "\066\046\001\002\000\004\005\204\001\002\000\004\005" +
    "\203\001\002\000\004\005\202\001\002\000\036\004\004" +
    "\015\uffd6\022\uffd6\024\036\026\uffd6\027\uffd6\030\uffd6\031" +
    "\031\033\uffd6\034\040\035\041\037\027\062\044\063\037" +
    "\001\002\000\024\012\051\013\054\016\052\042\045\055" +
    "\060\063\057\064\050\065\056\066\046\001\002\000\010" +
    "\007\ufff2\010\145\016\146\001\002\000\030\005\uffbf\012" +
    "\051\013\054\016\052\036\130\042\045\055\060\063\057" +
    "\064\050\065\056\066\046\001\002\000\030\005\uffbf\012" +
    "\051\013\054\016\052\036\130\042\045\055\060\063\057" +
    "\064\050\065\056\066\046\001\002\000\036\004\004\015" +
    "\uffd6\022\uffd6\024\036\026\uffd6\027\uffd6\030\uffd6\031\031" +
    "\033\uffd6\034\040\035\041\037\027\062\044\063\037\001" +
    "\002\000\004\015\124\001\002\000\024\012\051\013\054" +
    "\016\052\042\045\055\060\063\057\064\050\065\056\066" +
    "\046\001\002\000\024\012\051\013\054\016\052\042\045" +
    "\055\060\063\057\064\050\065\056\066\046\001\002\000" +
    "\046\005\uffb7\010\uffb7\017\uffb7\025\uffb7\032\uffb7\036\uffb7" +
    "\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047" +
    "\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7\001\002" +
    "\000\040\005\uffb9\010\121\017\uffb9\041\065\042\062\043" +
    "\072\044\070\045\066\046\073\047\074\050\067\051\071" +
    "\052\064\053\063\054\075\001\002\000\046\005\uffb5\010" +
    "\uffb5\017\uffb5\025\uffb5\032\uffb5\036\uffb5\041\uffb5\042\uffb5" +
    "\043\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051" +
    "\uffb5\052\uffb5\053\uffb5\054\uffb5\001\002\000\046\005\uffb3" +
    "\010\uffb3\017\uffb3\025\uffb3\032\uffb3\036\uffb3\041\uffb3\042" +
    "\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3" +
    "\051\uffb3\052\uffb3\053\uffb3\054\uffb3\001\002\000\024\012" +
    "\051\013\054\016\052\042\045\055\060\063\057\064\050" +
    "\065\056\066\046\001\002\000\004\005\116\001\002\000" +
    "\046\005\uffb2\010\uffb2\017\uffb2\025\uffb2\032\uffb2\036\uffb2" +
    "\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047" +
    "\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\001\002" +
    "\000\046\005\uffb8\010\uffb8\017\uffb8\025\uffb8\032\uffb8\036" +
    "\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8" +
    "\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\001" +
    "\002\000\046\005\uffb6\010\uffb6\017\uffb6\025\uffb6\032\uffb6" +
    "\036\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046" +
    "\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6" +
    "\001\002\000\050\005\uffb4\010\uffb4\016\112\017\uffb4\025" +
    "\uffb4\032\uffb4\036\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4" +
    "\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053" +
    "\uffb4\054\uffb4\001\002\000\024\012\051\013\054\016\052" +
    "\042\045\055\060\063\057\064\050\065\056\066\046\001" +
    "\002\000\046\005\uffa3\010\uffa3\017\uffa3\025\uffa3\032\uffa3" +
    "\036\uffa3\041\065\042\062\043\072\044\070\045\066\046" +
    "\073\047\074\050\067\051\071\052\064\053\063\054\075" +
    "\001\002\000\024\012\051\013\054\016\052\042\045\055" +
    "\060\063\057\064\050\065\056\066\046\001\002\000\024" +
    "\012\051\013\054\016\052\042\045\055\060\063\057\064" +
    "\050\065\056\066\046\001\002\000\024\012\051\013\054" +
    "\016\052\042\045\055\060\063\057\064\050\065\056\066" +
    "\046\001\002\000\024\012\051\013\054\016\052\042\045" +
    "\055\060\063\057\064\050\065\056\066\046\001\002\000" +
    "\024\012\051\013\054\016\052\042\045\055\060\063\057" +
    "\064\050\065\056\066\046\001\002\000\024\012\051\013" +
    "\054\016\052\042\045\055\060\063\057\064\050\065\056" +
    "\066\046\001\002\000\024\012\051\013\054\016\052\042" +
    "\045\055\060\063\057\064\050\065\056\066\046\001\002" +
    "\000\024\012\051\013\054\016\052\042\045\055\060\063" +
    "\057\064\050\065\056\066\046\001\002\000\024\012\051" +
    "\013\054\016\052\042\045\055\060\063\057\064\050\065" +
    "\056\066\046\001\002\000\024\012\051\013\054\016\052" +
    "\042\045\055\060\063\057\064\050\065\056\066\046\001" +
    "\002\000\024\012\051\013\054\016\052\042\045\055\060" +
    "\063\057\064\050\065\056\066\046\001\002\000\024\012" +
    "\051\013\054\016\052\042\045\055\060\063\057\064\050" +
    "\065\056\066\046\001\002\000\046\005\uffac\010\uffac\017" +
    "\uffac\025\uffac\032\uffac\036\uffac\041\065\042\062\043\072" +
    "\044\070\045\066\046\073\047\074\050\067\051\071\052" +
    "\064\053\063\054\uffac\001\002\000\032\005\uffa9\010\uffa9" +
    "\017\uffa9\025\uffa9\032\uffa9\036\uffa9\041\065\042\062\043" +
    "\072\044\070\053\uffa9\054\uffa9\001\002\000\032\005\uffa6" +
    "\010\uffa6\017\uffa6\025\uffa6\032\uffa6\036\uffa6\041\065\042" +
    "\062\043\072\044\070\053\uffa6\054\uffa6\001\002\000\046" +
    "\005\uffaf\010\uffaf\017\uffaf\025\uffaf\032\uffaf\036\uffaf\041" +
    "\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf" +
    "\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\001\002\000" +
    "\032\005\uffab\010\uffab\017\uffab\025\uffab\032\uffab\036\uffab" +
    "\041\065\042\062\043\072\044\070\053\uffab\054\uffab\001" +
    "\002\000\046\005\uffae\010\uffae\017\uffae\025\uffae\032\uffae" +
    "\036\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046" +
    "\uffae\047\uffae\050\uffae\051\uffae\052\uffae\053\uffae\054\uffae" +
    "\001\002\000\032\005\uffa8\010\uffa8\017\uffa8\025\uffa8\032" +
    "\uffa8\036\uffa8\041\065\042\062\043\072\044\070\053\uffa8" +
    "\054\uffa8\001\002\000\032\005\uffa7\010\uffa7\017\uffa7\025" +
    "\uffa7\032\uffa7\036\uffa7\041\065\042\062\043\072\044\070" +
    "\053\uffa7\054\uffa7\001\002\000\046\005\uffb1\010\uffb1\017" +
    "\uffb1\025\uffb1\032\uffb1\036\uffb1\041\uffb1\042\uffb1\043\072" +
    "\044\070\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052" +
    "\uffb1\053\uffb1\054\uffb1\001\002\000\032\005\uffaa\010\uffaa" +
    "\017\uffaa\025\uffaa\032\uffaa\036\uffaa\041\065\042\062\043" +
    "\072\044\070\053\uffaa\054\uffaa\001\002\000\046\005\uffad" +
    "\010\uffad\017\uffad\025\uffad\032\uffad\036\uffad\041\065\042" +
    "\062\043\072\044\070\045\066\046\073\047\074\050\067" +
    "\051\071\052\064\053\uffad\054\uffad\001\002\000\046\005" +
    "\uffb0\010\uffb0\017\uffb0\025\uffb0\032\uffb0\036\uffb0\041\uffb0" +
    "\042\uffb0\043\072\044\070\045\uffb0\046\uffb0\047\uffb0\050" +
    "\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\001\002\000\026" +
    "\012\051\013\054\016\052\017\114\042\045\055\060\063" +
    "\057\064\050\065\056\066\046\001\002\000\004\017\115" +
    "\001\002\000\046\005\uffcc\010\uffcc\017\uffcc\025\uffcc\032" +
    "\uffcc\036\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc" +
    "\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054" +
    "\uffcc\001\002\000\046\005\uffcd\010\uffcd\017\uffcd\025\uffcd" +
    "\032\uffcd\036\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045" +
    "\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd" +
    "\054\uffcd\001\002\000\036\004\uffd3\015\uffd3\022\uffd3\024" +
    "\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\033\uffd3\034\uffd3" +
    "\035\uffd3\037\uffd3\062\uffd3\063\uffd3\001\002\000\034\017" +
    "\120\041\065\042\062\043\072\044\070\045\066\046\073" +
    "\047\074\050\067\051\071\052\064\053\063\054\075\001" +
    "\002\000\046\005\uffa5\010\uffa5\017\uffa5\025\uffa5\032\uffa5" +
    "\036\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5\046" +
    "\uffa5\047\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5" +
    "\001\002\000\024\012\051\013\054\016\052\042\045\055" +
    "\060\063\057\064\050\065\056\066\046\001\002\000\006" +
    "\005\uffba\017\uffba\001\002\000\046\005\uffa4\010\uffa4\017" +
    "\uffa4\025\uffa4\032\uffa4\036\uffa4\041\uffa4\042\uffa4\043\072" +
    "\044\070\045\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4\052" +
    "\uffa4\053\uffa4\054\uffa4\001\002\000\012\002\uffe6\004\uffe6" +
    "\014\uffe6\021\uffe6\001\002\000\016\015\uffd7\022\uffd7\026" +
    "\uffd7\027\uffd7\030\uffd7\033\uffd7\001\002\000\036\005\uffc2" +
    "\036\136\041\065\042\062\043\072\044\070\045\066\046" +
    "\073\047\074\050\067\051\071\052\064\053\063\054\075" +
    "\001\002\000\004\005\135\001\002\000\004\016\131\001" +
    "\002\000\024\012\051\013\054\016\052\042\045\055\060" +
    "\063\057\064\050\065\056\066\046\001\002\000\034\017" +
    "\133\041\065\042\062\043\072\044\070\045\066\046\073" +
    "\047\074\050\067\051\071\052\064\053\063\054\075\001" +
    "\002\000\030\005\uffbf\012\051\013\054\016\052\036\130" +
    "\042\045\055\060\063\057\064\050\065\056\066\046\001" +
    "\002\000\004\005\uffc0\001\002\000\036\004\uffd1\015\uffd1" +
    "\022\uffd1\024\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\033" +
    "\uffd1\034\uffd1\035\uffd1\037\uffd1\062\uffd1\063\uffd1\001\002" +
    "\000\004\016\137\001\002\000\024\012\051\013\054\016" +
    "\052\042\045\055\060\063\057\064\050\065\056\066\046" +
    "\001\002\000\034\017\141\041\065\042\062\043\072\044" +
    "\070\045\066\046\073\047\074\050\067\051\071\052\064" +
    "\053\063\054\075\001\002\000\030\005\uffbf\012\051\013" +
    "\054\016\052\036\130\042\045\055\060\063\057\064\050" +
    "\065\056\066\046\001\002\000\004\005\uffc1\001\002\000" +
    "\004\005\144\001\002\000\036\004\uffd2\015\uffd2\022\uffd2" +
    "\024\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\033\uffd2\034" +
    "\uffd2\035\uffd2\037\uffd2\062\uffd2\063\uffd2\001\002\000\004" +
    "\063\161\001\002\000\030\012\051\013\054\016\052\017" +
    "\152\040\151\042\045\055\060\063\057\064\050\065\056" +
    "\066\046\001\002\000\004\017\160\001\002\000\036\010" +
    "\156\017\uffbc\041\065\042\062\043\072\044\070\045\066" +
    "\046\073\047\074\050\067\051\071\052\064\053\063\054" +
    "\075\001\002\000\004\063\153\001\002\000\004\005\uffca" +
    "\001\002\000\006\010\154\017\uffbb\001\002\000\026\012" +
    "\051\013\054\016\052\040\151\042\045\055\060\063\057" +
    "\064\050\065\056\066\046\001\002\000\004\017\uffbd\001" +
    "\002\000\026\012\051\013\054\016\052\040\151\042\045" +
    "\055\060\063\057\064\050\065\056\066\046\001\002\000" +
    "\004\017\uffbe\001\002\000\004\005\uffcb\001\002\000\010" +
    "\006\ufff2\007\ufff2\010\145\001\002\000\006\006\ufff3\007" +
    "\ufff3\001\002\000\034\025\164\041\065\042\062\043\072" +
    "\044\070\045\066\046\073\047\074\050\067\051\071\052" +
    "\064\053\063\054\075\001\002\000\030\004\004\024\036" +
    "\026\uffd6\027\uffd6\030\uffd6\031\031\034\040\035\041\037" +
    "\027\062\044\063\037\001\002\000\010\026\uffc7\027\uffc7" +
    "\030\167\001\002\000\006\026\175\027\uffc4\001\002\000" +
    "\024\012\051\013\054\016\052\042\045\055\060\063\057" +
    "\064\050\065\056\066\046\001\002\000\010\026\uffc7\027" +
    "\uffc7\030\167\001\002\000\006\026\uffc8\027\uffc8\001\002" +
    "\000\034\025\173\041\065\042\062\043\072\044\070\045" +
    "\066\046\073\047\074\050\067\051\071\052\064\053\063" +
    "\054\075\001\002\000\030\004\004\024\036\026\uffd6\027" +
    "\uffd6\030\uffd6\031\031\034\040\035\041\037\027\062\044" +
    "\063\037\001\002\000\010\026\uffc6\027\uffc6\030\uffc6\001" +
    "\002\000\024\004\004\024\036\027\uffd6\031\031\034\040" +
    "\035\041\037\027\062\044\063\037\001\002\000\004\027" +
    "\177\001\002\000\004\005\uffc9\001\002\000\004\027\uffc5" +
    "\001\002\000\016\015\uffd8\022\uffd8\026\uffd8\027\uffd8\030" +
    "\uffd8\033\uffd8\001\002\000\036\004\uffcf\015\uffcf\022\uffcf" +
    "\024\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\033\uffcf\034" +
    "\uffcf\035\uffcf\037\uffcf\062\uffcf\063\uffcf\001\002\000\036" +
    "\004\uffd4\015\uffd4\022\uffd4\024\uffd4\026\uffd4\027\uffd4\030" +
    "\uffd4\031\uffd4\033\uffd4\034\uffd4\035\uffd4\037\uffd4\062\uffd4" +
    "\063\uffd4\001\002\000\036\004\uffce\015\uffce\022\uffce\024" +
    "\uffce\026\uffce\027\uffce\030\uffce\031\uffce\033\uffce\034\uffce" +
    "\035\uffce\037\uffce\062\uffce\063\uffce\001\002\000\034\032" +
    "\206\041\065\042\062\043\072\044\070\045\066\046\073" +
    "\047\074\050\067\051\071\052\064\053\063\054\075\001" +
    "\002\000\024\004\004\024\036\031\031\033\uffd6\034\040" +
    "\035\041\037\027\062\044\063\037\001\002\000\004\033" +
    "\210\001\002\000\004\005\uffc3\001\002\000\024\012\051" +
    "\013\054\016\052\042\045\055\060\063\057\064\050\065" +
    "\056\066\046\001\002\000\004\005\213\001\002\000\036" +
    "\004\uffd5\015\uffd5\022\uffd5\024\uffd5\026\uffd5\027\uffd5\030" +
    "\uffd5\031\uffd5\033\uffd5\034\uffd5\035\uffd5\037\uffd5\062\uffd5" +
    "\063\uffd5\001\002\000\004\005\215\001\002\000\036\004" +
    "\uffd0\015\uffd0\022\uffd0\024\uffd0\026\uffd0\027\uffd0\030\uffd0" +
    "\031\uffd0\033\uffd0\034\uffd0\035\uffd0\037\uffd0\062\uffd0\063" +
    "\uffd0\001\002\000\012\056\023\057\020\060\021\061\024" +
    "\001\002\000\004\006\uffe1\001\002\000\012\056\023\057" +
    "\020\060\021\061\024\001\002\000\006\010\222\017\uffe2" +
    "\001\002\000\004\063\224\001\002\000\004\017\uffe5\001" +
    "\002\000\004\006\225\001\002\000\012\056\023\057\020" +
    "\060\021\061\024\001\002\000\006\010\222\017\uffe2\001" +
    "\002\000\004\017\uffe3\001\002\000\004\063\241\001\002" +
    "\000\012\002\ufff9\004\004\014\011\021\230\001\002\000" +
    "\012\002\ufff9\004\004\014\011\021\230\001\002\000\012" +
    "\002\ufff9\004\004\014\011\021\230\001\002\000\004\002" +
    "\001\001\002\000\012\002\ufff9\004\004\014\011\021\230" +
    "\001\002\000\004\002\ufffa\001\002\000\004\002\ufffc\001" +
    "\002\000\004\002\ufffb\001\002\000\004\016\242\001\002" +
    "\000\010\017\uffdd\023\244\063\243\001\002\000\004\006" +
    "\uffda\001\002\000\004\063\263\001\002\000\004\017\257" +
    "\001\002\000\004\006\247\001\002\000\012\056\023\057" +
    "\020\060\021\061\024\001\002\000\006\010\251\017\uffdb" +
    "\001\002\000\006\023\244\063\243\001\002\000\004\017" +
    "\uffde\001\002\000\004\006\254\001\002\000\012\056\023" +
    "\057\020\060\021\061\024\001\002\000\006\010\251\017" +
    "\uffdb\001\002\000\004\017\uffdc\001\002\000\004\006\260" +
    "\001\002\000\024\004\004\022\uffd6\024\036\031\031\034" +
    "\040\035\041\037\027\062\044\063\037\001\002\000\004" +
    "\022\262\001\002\000\012\002\uffdf\004\uffdf\014\uffdf\021" +
    "\uffdf\001\002\000\004\006\uffd9\001\002\000\004\021\uffff" +
    "\001\002\000\004\021\ufffe\001\002\000\004\002\000\001" +
    "\002\000\006\006\271\007\272\001\002\000\044\002\ufff8" +
    "\004\ufff8\014\ufff8\015\ufff8\021\ufff8\022\ufff8\024\ufff8\026" +
    "\ufff8\027\ufff8\030\ufff8\031\ufff8\033\ufff8\034\ufff8\035\ufff8" +
    "\037\ufff8\062\ufff8\063\ufff8\001\002\000\012\056\023\057" +
    "\020\060\021\061\024\001\002\000\014\012\276\013\300" +
    "\064\273\065\274\066\277\001\002\000\006\005\uffed\010" +
    "\uffed\001\002\000\006\005\uffee\010\uffee\001\002\000\004" +
    "\005\304\001\002\000\006\005\uffec\010\uffec\001\002\000" +
    "\006\005\uffef\010\uffef\001\002\000\006\005\uffeb\010\uffeb" +
    "\001\002\000\006\005\ufff0\010\302\001\002\000\014\012" +
    "\276\013\300\064\273\065\274\066\277\001\002\000\004" +
    "\005\ufff1\001\002\000\006\011\306\063\161\001\002\000" +
    "\044\002\ufff6\004\ufff6\014\ufff6\015\ufff6\021\ufff6\022\ufff6" +
    "\024\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6\033\ufff6\034" +
    "\ufff6\035\ufff6\037\ufff6\062\ufff6\063\ufff6\001\002\000\044" +
    "\002\ufff4\004\ufff4\014\ufff4\015\ufff4\021\ufff4\022\ufff4\024" +
    "\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\033\ufff4\034\ufff4" +
    "\035\ufff4\037\ufff4\062\ufff4\063\ufff4\001\002\000\004\005" +
    "\310\001\002\000\006\011\312\063\161\001\002\000\044" +
    "\002\ufff7\004\ufff7\014\ufff7\015\ufff7\021\ufff7\022\ufff7\024" +
    "\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\033\ufff7\034\ufff7" +
    "\035\ufff7\037\ufff7\062\ufff7\063\ufff7\001\002\000\044\002" +
    "\ufff5\004\ufff5\014\ufff5\015\ufff5\021\ufff5\022\ufff5\024\ufff5" +
    "\026\ufff5\027\ufff5\030\ufff5\031\ufff5\033\ufff5\034\ufff5\035" +
    "\ufff5\037\ufff5\062\ufff5\063\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\310\000\012\002\004\003\007\005\006\013\005\001" +
    "\001\000\006\006\267\007\266\001\001\000\002\001\001" +
    "\000\010\003\264\005\006\013\005\001\001\000\010\003" +
    "\263\005\006\013\005\001\001\000\004\016\230\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\021\037\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\005\034\007\027\022" +
    "\042\023\041\025\032\026\033\032\031\001\001\000\010" +
    "\024\054\033\213\036\125\001\001\000\002\001\001\000" +
    "\006\024\054\036\204\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\005\034\007\027\022" +
    "\200\023\041\025\032\026\033\032\031\001\001\000\006" +
    "\024\054\036\162\001\001\000\002\001\001\000\010\024" +
    "\054\033\142\036\125\001\001\000\010\024\054\033\126" +
    "\036\125\001\001\000\020\005\034\007\027\022\124\023" +
    "\041\025\032\026\033\032\031\001\001\000\002\001\001" +
    "\000\010\024\054\035\052\036\046\001\001\000\006\024" +
    "\054\036\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\024\054\036" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\024" +
    "\054\036\060\001\001\000\002\001\001\000\006\024\054" +
    "\036\110\001\001\000\006\024\054\036\107\001\001\000" +
    "\006\024\054\036\106\001\001\000\006\024\054\036\105" +
    "\001\001\000\006\024\054\036\104\001\001\000\006\024" +
    "\054\036\103\001\001\000\006\024\054\036\102\001\001" +
    "\000\006\024\054\036\101\001\001\000\006\024\054\036" +
    "\100\001\001\000\006\024\054\036\077\001\001\000\006" +
    "\024\054\036\076\001\001\000\006\024\054\036\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\024" +
    "\054\035\112\036\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\024\054\035\121\036\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\024\054\036\131\001\001\000" +
    "\002\001\001\000\010\024\054\033\133\036\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\024\054\036\137\001\001\000\002\001\001\000\010" +
    "\024\054\033\141\036\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\161\001\001" +
    "\000\010\024\054\034\146\036\147\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\024\054\034\154\036\147\001" +
    "\001\000\002\001\001\000\010\024\054\034\156\036\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\005\034" +
    "\007\027\022\164\023\041\025\032\026\033\032\031\001" +
    "\001\000\006\027\165\030\167\001\001\000\004\031\175" +
    "\001\001\000\006\024\054\036\171\001\001\000\006\027" +
    "\170\030\167\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\005\034\007\027\022\173\023\041\025\032\026" +
    "\033\032\031\001\001\000\002\001\001\000\020\005\034" +
    "\007\027\022\177\023\041\025\032\026\033\032\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\005\034\007\027" +
    "\022\206\023\041\025\032\026\033\032\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\024\054\035\211" +
    "\036\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\021\037\216" +
    "\001\001\000\002\001\001\000\004\012\220\001\001\000" +
    "\004\015\222\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\225\001\001\000\004\015" +
    "\226\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\004\233\005\232\013\231\016\234\001\001\000\012\004" +
    "\237\005\232\013\231\016\234\001\001\000\012\004\236" +
    "\005\232\013\231\016\234\001\001\000\002\001\001\000" +
    "\012\004\235\005\232\013\231\016\234\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\244\021\245\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\247\001\001\000\004\020\251\001\001\000\004" +
    "\021\252\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\254\001\001\000\004\020\255\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\005\034\007\027\022" +
    "\260\023\041\025\032\026\033\032\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\306\001\001\000\006\010" +
    "\274\011\300\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\302\011\300" +
    "\001\001\000\002\001\001\000\006\006\304\007\266\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\310\007\266\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= Iter1 Procedure Iter2 
            {
              Object RESULT =null;
		int varFuncsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varFuncsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object varFuncs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mainProcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mainProcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object mainProc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int varFuncProcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varFuncProcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object varFuncProc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                  List<VarDeclNode> varDeclarations = new ArrayList<>();
                                                  List<FunctionNode> functions = new ArrayList<>();
                                                  List<ProcedureNode> procedures = new ArrayList<>(List.of(((ProcedureNode) mainProc)));

                                                  for (Node node : (List<Node>) varFuncs) {
                                                      if (node instanceof VarDeclNode) varDeclarations.add((VarDeclNode) node);
                                                      else if (node instanceof FunctionNode) functions.add((FunctionNode) node);
                                                  }

                                                  for (Node node : (List<Node>) varFuncProc) {
                                                      if (node instanceof VarDeclNode) varDeclarations.add((VarDeclNode) node);
                                                      else if (node instanceof FunctionNode) functions.add((FunctionNode) node);
                                                      else if (node instanceof ProcedureNode) procedures.add((ProcedureNode) node);
                                                  }

                                                  RESULT = new ProgramNode(varDeclarations, functions, procedures);
                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Iter1 ::= VarDecl Iter1 
            {
              Object RESULT =null;
		int vardeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vardeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vardecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nodesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nodesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nodes = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<Node>) nodes).add(0, (VarDeclNode) vardecl); RESULT = nodes;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Iter1 ::= Function Iter1 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object func = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nodesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nodesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nodes = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<Node>) nodes).add(0, (FunctionNode) func); RESULT = nodes;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Iter1 ::= 
            {
              Object RESULT =null;
		RESULT = new ArrayList<Node>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Iter2 ::= VarDecl Iter2 
            {
              Object RESULT =null;
		int vardeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vardeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vardecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nodesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nodesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nodes = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<Node>) nodes).add(0, (VarDeclNode) vardecl); RESULT = nodes;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Iter2 ::= Function Iter2 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object func = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nodesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nodesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nodes = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<Node>) nodes).add(0, (FunctionNode) func); RESULT =  nodes;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Iter2 ::= Procedure Iter2 
            {
              Object RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object proc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nodesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nodesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nodes = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<Node>) nodes).add(0, (ProcedureNode) proc); RESULT =  nodes;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Iter2 ::= 
            {
              Object RESULT =null;
		RESULT = new ArrayList<Node>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Iter2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VarDecl ::= VAR Decls 
            {
              Object RESULT =null;
		int declsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object decls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		VarDeclNode varDeclNode = new VarDeclNode((List<VarSingleDeclNode>) decls); RESULT =  varDeclNode;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Decls ::= Ids COLON Type SEMI Decls 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int declsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object decls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<VarSingleDeclNode>)decls).add(0, new VarSingleDeclNode((ArrayList<IdNode>) ids, (String) type, null)); RESULT = decls;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Decls ::= Ids ASSIGN Consts SEMI Decls 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int constsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int constsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object consts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int declsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object decls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<VarSingleDeclNode>)decls).add(0, new VarSingleDeclNode((ArrayList<IdNode>) ids, null, (ArrayList<ConstNode>) consts)); RESULT = decls;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Decls ::= Ids COLON Type SEMI ENDVAR 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ArrayList<VarSingleDeclNode> declarations = new ArrayList<VarSingleDeclNode>(); declarations.add(0, new VarSingleDeclNode((ArrayList<IdNode>) ids, (String) type,  null)); RESULT = declarations;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Decls ::= Ids ASSIGN Consts SEMI ENDVAR 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int constsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int constsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object consts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		ArrayList<VarSingleDeclNode> declarations = new ArrayList<VarSingleDeclNode>(); declarations.add(0, new VarSingleDeclNode((ArrayList<IdNode>) ids, null, (ArrayList<ConstNode>) consts)); RESULT = declarations;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Ids ::= ID COMMA Ids 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<IdNode>) ids).add(0, new IdNode((String) name)); RESULT = ids;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ids",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Ids ::= ID 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<IdNode> ids = new ArrayList<IdNode>();  ids.add(0, new IdNode((String) name)); RESULT = ids;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ids",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Consts ::= Const COMMA Consts 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int constsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int constsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object consts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<ConstNode>) consts).add(0, (ConstNode) c); RESULT = consts;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Consts",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Consts ::= Const 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<ConstNode> consts = new ArrayList<ConstNode>();  consts.add(0, (ConstNode) c); RESULT = consts;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Consts",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Const ::= REAL_CONST 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ConstNode(Float.parseFloat(value));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Const ::= INTEGER_CONST 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ConstNode(Integer.parseInt(value));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Const ::= STRING_CONST 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ConstNode((String) value);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Const ::= TRUE 
            {
              Object RESULT =null;
		RESULT = new ConstNode(true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Const ::= FALSE 
            {
              Object RESULT =null;
		RESULT = new ConstNode(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Type ::= REAL 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  "real";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Type ::= INTEGER 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  "integer";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Type ::= STRING 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  "string";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Type ::= BOOLEAN 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  "boolean";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Function ::= FUNCTION ID LPAR FuncParams RPAR TYPERETURN Types COLON Body ENDFUNCTION 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int typesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object types = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new FunctionNode((String) name, (ArrayList<IdNode>) params, (ArrayList<String>) types, (BodyNode) b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Function",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FuncParams ::= ID COLON Type OtherFuncParams 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		IdNode param = new IdNode((String) name, false);  param.idType = (String) type; param.isFuncParam = (boolean) true; ((ArrayList<IdNode>) params).add(0, param); RESULT = params;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncParams",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FuncParams ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncParams",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OtherFuncParams ::= COMMA ID COLON Type OtherFuncParams 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		IdNode param = new IdNode((String) name, false);  param.idType = (String) type; param.isFuncParam = (boolean) true; ((ArrayList<IdNode>) params).add(0, param); RESULT = params;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherFuncParams",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OtherFuncParams ::= 
            {
              Object RESULT =null;
		RESULT = new ArrayList<IdNode>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherFuncParams",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Types ::= Type COMMA Types 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object types = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<String>) types).add(0, (String) type); RESULT = types;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Types",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Types ::= Type 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<String> types = new ArrayList<String>();  types.add(0, (String) type); RESULT = types;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Types",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Procedure ::= PROCEDURE ID LPAR ProcParams RPAR COLON Body ENDPROCEDURE 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ProcedureNode((String) name, (ArrayList<IdNode>) params, (BodyNode) b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Procedure",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ProcParams ::= ProcParamId COLON Type OtherProcParams 
            {
              Object RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((IdNode) param).idType = (String) type; ((ArrayList<IdNode>) params).add(0, (IdNode) param); RESULT = params;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcParams",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ProcParams ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcParams",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OtherProcParams ::= COMMA ProcParamId COLON Type OtherProcParams 
            {
              Object RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((IdNode) param).idType = (String) type; ((ArrayList<IdNode>) params).add(0, (IdNode) param); RESULT = params;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherProcParams",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OtherProcParams ::= 
            {
              Object RESULT =null;
		RESULT = new ArrayList<IdNode>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherProcParams",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ProcParamId ::= ID 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IdNode((String) name, false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcParamId",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ProcParamId ::= OUT ID 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IdNode((String) name, true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcParamId",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Body ::= VarDecl Body 
            {
              Object RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object decl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((BodyNode) b).nodes.add(0, (VarDeclNode) decl); RESULT = b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Body ::= Stat Body 
            {
              Object RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object stat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((BodyNode) b).nodes.add(0, (StatementNode) stat); RESULT = b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Body ::= 
            {
              Object RESULT =null;
		 RESULT = new BodyNode(new ArrayList<Node>());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Stat ::= Ids ASSIGN Exprs SEMI 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exprs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new AssignStatementNode((ArrayList<IdNode>) ids, (ArrayList<ExprNode>) exprs);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Stat ::= ProcCall SEMI 
            {
              Object RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object stat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = stat;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Stat ::= RETURN Exprs SEMI 
            {
              Object RESULT =null;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exprs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ReturnStatementNode((ArrayList<ExprNode>) exprs);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Stat ::= WRITE IOArgs SEMI 
            {
              Object RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new WriteStatementNode((ArrayList<ExprNode>) args, false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Stat ::= WRITERETURN IOArgs SEMI 
            {
              Object RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new WriteStatementNode((ArrayList<ExprNode>) args, true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Stat ::= READ IOArgs SEMI 
            {
              Object RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ReadStatementNode((ArrayList<ExprNode>) args);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Stat ::= IfStat SEMI 
            {
              Object RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object stat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = stat;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Stat ::= WhileStat SEMI 
            {
              Object RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object stat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = stat;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FunCall ::= ID LPAR Exprs RPAR 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exprs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new FunCallNode((String) name, (ArrayList<ExprNode>) exprs);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FunCall ::= ID LPAR RPAR 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new FunCallNode((String) name, null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ProcCall ::= ID LPAR ProcExprs RPAR 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arguments = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ProcCallNode((String) name, (ArrayList<ProcArgumentNode>) arguments);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcCall",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ProcCall ::= ID LPAR RPAR 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new ProcCallNode((String) name, null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcCall",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IfStat ::= IF Expr THEN Body Elifs Else ENDIF 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elifsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elifsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object elifs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object els = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new IfStatementNode((ExprNode) e, (BodyNode) b, (ArrayList<ElifNode>) elifs, (BodyNode) els);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStat",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Elifs ::= Elif Elifs 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elifsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elifsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elifs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<ElifNode>) elifs).add(0, (ElifNode) e); RESULT = elifs;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Elifs",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Elifs ::= 
            {
              Object RESULT =null;
		 RESULT = new ArrayList<ElifNode>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Elifs",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Elif ::= ELIF Expr THEN Body 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ElifNode((ExprNode) e, (BodyNode) b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Elif",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Else ::= ELSE Body 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Else ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // WhileStat ::= WHILE Expr DO Body ENDWHILE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new WhileStatementNode((ExprNode) e, (BodyNode) b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStat",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IOArgs ::= Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<ExprNode> exprs = new ArrayList<ExprNode>();  exprs.add(0, (ExprNode) e); RESULT = exprs;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IOArgs",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // IOArgs ::= Expr DOLLARSIGN LPAR Expr RPAR IOArgs 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exprs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ExprNode) e2).isDollar = true; ((ArrayList<ExprNode>) exprs).add(0, (ExprNode) e2); ((ArrayList<ExprNode>) exprs).add(0, (ExprNode) e1); RESULT = exprs;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IOArgs",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // IOArgs ::= DOLLARSIGN LPAR Expr RPAR IOArgs 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exprs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ExprNode) e).isDollar = true; ((ArrayList<ExprNode>) exprs).add(0, (ExprNode) e); RESULT = exprs;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IOArgs",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // IOArgs ::= 
            {
              Object RESULT =null;
		RESULT = new ArrayList<ExprNode>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IOArgs",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ProcExprs ::= Expr COMMA ProcExprs 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arguments = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<ProcArgumentNode>) arguments).add(0, new ProcArgumentNode((ExprNode) e)); RESULT = arguments;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ProcExprs ::= REF ID COMMA ProcExprs 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arguments = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<ProcArgumentNode>) arguments).add(0, new ProcArgumentNode((String) name)); RESULT = arguments;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ProcExprs ::= Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<ProcArgumentNode> arguments = new ArrayList<ProcArgumentNode>();  arguments.add(0, new ProcArgumentNode((ExprNode) e)); RESULT = arguments;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ProcExprs ::= REF ID 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<ProcArgumentNode> arguments = new ArrayList<ProcArgumentNode>();  arguments.add(0, new ProcArgumentNode((String) name)); RESULT = arguments;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Exprs ::= Expr COMMA Exprs 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exprs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		((ArrayList<ExprNode>) exprs).add(0, (ExprNode) e); RESULT = exprs;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exprs",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Exprs ::= Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<ExprNode> exprs = new ArrayList<ExprNode>();   exprs.add(0, (ExprNode) e); RESULT = exprs;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exprs",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= FunCall 
            {
              Object RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fun = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode("funcall", (FunCallNode) fun);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= REAL_CONST 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode("real", new ConstNode(Float.parseFloat(val)));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= INTEGER_CONST 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode("integer", new ConstNode(Integer.parseInt(val)));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= STRING_CONST 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode("string", new ConstNode((String) val));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= ID 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode("id", new IdNode((String) name));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= TRUE 
            {
              Object RESULT =null;
		RESULT = new ExprNode("true", new ConstNode(true));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= FALSE 
            {
              Object RESULT =null;
		RESULT = new ExprNode("false", new ConstNode(false));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= Expr PLUS Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode("add", (ExprNode) e1, (ExprNode) e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= Expr MINUS Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode("sub", (ExprNode) e1, (ExprNode) e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= Expr TIMES Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode("times", (ExprNode) e1, (ExprNode) e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= Expr DIV Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode("div", (ExprNode) e1, (ExprNode) e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= Expr AND Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode("and", (ExprNode) e1, (ExprNode) e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= Expr OR Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode("or", (ExprNode) e1, (ExprNode) e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= Expr GT Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode("gt", (ExprNode) e1, (ExprNode) e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= Expr GE Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode("ge", (ExprNode) e1, (ExprNode) e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= Expr LT Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode("lt", (ExprNode) e1, (ExprNode) e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= Expr LE Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode("le", (ExprNode) e1, (ExprNode) e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= Expr EQ Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode("eq", (ExprNode) e1, (ExprNode) e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= Expr NE Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode("ne", (ExprNode) e1, (ExprNode) e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= LPAR Expr RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ExprNode("pare", (ExprNode) e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expr ::= MINUS Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode("uminus", (ExprNode) e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expr ::= NOT Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode("not", (ExprNode) e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
